# -*- coding: utf-8 -*-
"""Fashion_mnist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J9npfdT0ELdkp8hWOJF7DPNndS-RE40j

Seeding For Reproducibility
"""

import random
random.seed(0)

import numpy as np
np.random.seed(0)
import tensorflow as tf
tf.random.set_seed(0)

"""Importing necessary files"""

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,Input
import matplotlib.pyplot as plt

class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if(logs.get('accuracy') >= 0.94):# Experiment with changing this value
            print("\nReached 94% accuracy so cancelling training!")
            self.model.stop_training = True
callbacks = myCallback()

"""Data Curation"""

f_mnist=tf.keras.datasets.fashion_mnist
(training_images,training_labels),(test_images,test_labels)=f_mnist.load_data()

"""Data Preprocessing"""

type(training_images)

type(training_labels)

print(len(training_images))
print(len(training_labels))
print(len(test_images))
print(len(test_labels))

print(training_images[0])

tf.shape(training_images)

plt.imshow(training_images[0])
plt.show()

print(training_labels[0])

"""list_name=['T-shirt/top','Trouser','Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle Boot']

Normalize the image
"""

training_images=training_images/255
test_images=test_images/255

training_images=training_images.reshape(60000,28,28,1)
test_images=test_images.reshape(10000,28,28,1)

training_images.shape

test_images.shape

"""Covulutional Layer"""

model=Sequential([Input(shape=(28, 28, 1)),Conv2D(64,(3,3),activation='relu'),
                 MaxPooling2D(2,2),Conv2D(64,(3,3),activation='relu'),MaxPooling2D(2,2),
                 Flatten(),
                 Dense(1024,activation='relu'),
                 Dense(10,activation='softmax')
                 ])
#Model Summary
model.summary()

#use same settings
model.compile(optimizer='Adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

print('\nModel Training:')
#Train the model
history= model.fit(training_images,training_labels,epochs=5,validation_data=(test_images, test_labels),callbacks=[callbacks])

#Test the model
test_loss, test_accuracy = model.evaluate(test_images,test_labels)
print(f'Test accuracy: {test_accuracy}')

# Plotting training and validation accuracy
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Plotting training and validation loss
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

model.save('fashion_model2.h5')

